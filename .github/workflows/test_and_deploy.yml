name: CI/CD Pipeline

on:
  push:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt pytest
        pip list  # Для отладки

    - name: Verify test files
      run: |
        echo "Checking test files..."
        ls -la backend/
        if [ ! -f "backend/test_app.py" ]; then
          echo "Error: Test file test_app.py not found!"
          exit 1
        fi

    - name: Run backend tests
      working-directory: ./backend
      run: |
        python -m pytest -v --capture=no

    - name: Validate Nginx configuration
      run: |
        docker run --rm -v $(pwd)/nginx/app.conf:/etc/nginx/conf.d/default.conf nginx:alpine nginx -t

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Build and push backend
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/backend:latest ./backend
        docker push ${{ secrets.DOCKER_USERNAME }}/backend:latest

    - name: Build and push nginx
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/nginx:latest ./nginx
        docker push ${{ secrets.DOCKER_USERNAME }}/nginx:latest

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.PROD_SSH_PRIVATE_KEY }}

    - name: Deploy
      run: |
        scp -o StrictHostKeyChecking=no ./docker-compose.yml root@${{ secrets.PROD_SERVER_IP }}:/root/app/

        ssh -o StrictHostKeyChecking=no root@${{ secrets.PROD_SERVER_IP }} << 'EOF'
          cd /root/app
          docker-compose down
          docker pull ${{ secrets.DOCKER_USERNAME }}/backend:latest
          docker pull ${{ secrets.DOCKER_USERNAME }}/nginx:latest
          docker-compose up -d
          docker ps  # Для проверки запущенных контейнеров
        EOF
